/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

 package org.apache.commons.math.analysis.solvers;

 import org.junit.Test;
 import org.junit.Assert;
 import org.apache.commons.math3.exception.NoBracketingException;
 import org.apache.commons.math3.analysis.UnivariateFunction;
 import org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver;
 
 public class BracketingNthOrderBrentSolverTest {
 
     @Test
     public void testDoSolve() {
         UnivariateFunction function = new UnivariateFunction() {
             public double value(double x) {
                 return x * x - 2;
             }
         };
 
         BracketingNthOrderBrentSolver solver = new BracketingNthOrderBrentSolver(1.0e-12, 1.0e-8, 1.0e-10, 5);
         
         // Test for a valid root
         double root = solver.solve(100, function, 0.0, 2.0);
         Assert.assertEquals(Math.sqrt(2), root, 1.0e-12);
 
         // Test for a root at the endpoint
         root = solver.solve(100, function, 2.0, 4.0);
         Assert.assertEquals(2.0, root, 1.0e-12);
 
         // Test for NoBracketingException
         try {
             root = solver.solve(100, function, 2.0, 3.0);
             Assert.fail("Expected NoBracketingException");
         } catch (NoBracketingException e) {
             // expected behavior
         }
     }
 }