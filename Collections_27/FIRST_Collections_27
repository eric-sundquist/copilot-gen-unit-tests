package org.apache.commons.collections4.map;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.util.ArrayList;
import java.util.Collection;

import junit.framework.TestCase;

public class ReflectionFactoryTest extends TestCase {

    private ReflectionFactory<ArrayList<String>> factory;

    @Override
    protected void setUp() throws Exception {
        super.setUp();
        factory = new ReflectionFactory<>(ArrayList.class);
    }

    public void testCreate() {
        Collection<String> collection = factory.create();
        assertNotNull(collection);
        assertTrue(collection instanceof ArrayList);
    }

    public void testCreateWithInvalidClass() {
        ReflectionFactory<InvalidClass> invalidFactory = new ReflectionFactory<>(InvalidClass.class);
        try {
            invalidFactory.create();
            fail("Expected FunctorException");
        } catch (FunctorException ex) {
            // expected
        }
    }

    public void testSerialization() throws IOException, ClassNotFoundException {
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        ObjectOutputStream oos = new ObjectOutputStream(out);
        oos.writeObject(factory);

        ByteArrayInputStream in = new ByteArrayInputStream(out.toByteArray());
        ObjectInputStream ois = new ObjectInputStream(in);
        ReflectionFactory<?> deserializedFactory = (ReflectionFactory<?>) ois.readObject();

        assertNotNull(deserializedFactory.create());
    }

    public void testSerializationWithInvalidClass() throws IOException {
        ReflectionFactory<InvalidClass> invalidFactory = new ReflectionFactory<>(InvalidClass.class);
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        ObjectOutputStream oos = new ObjectOutputStream(out);
        oos.writeObject(invalidFactory);

        ByteArrayInputStream in = new ByteArrayInputStream(out.toByteArray());
        ObjectInputStream ois = new ObjectInputStream(in);
        try {
            ois.readObject();
            fail("Expected UnsupportedOperationException");
        } catch (UnsupportedOperationException ex) {
            // expected
        }
    }

    private static class InvalidClass {
        private InvalidClass() {
            throw new RuntimeException("Cannot instantiate");
        }
    }
}