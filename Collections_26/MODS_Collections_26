package org.apache.commons.collections4.keyvalue;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import junit.framework.TestCase;

public class MultiKeyTest extends TestCase {

    public void testReadResolve() {
        MultiKey multiKey = new MultiKey("key1", "key2");
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        ObjectOutputStream oos = null;
        try {
            oos = new ObjectOutputStream(baos);
            oos.writeObject(multiKey);
            oos.close();
        } catch (IOException e) {
            fail("IOException: " + e);
        }

        ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());
        ObjectInputStream ois = null;
        try {
            ois = new ObjectInputStream(bais);
            MultiKey deserializedMultiKey = (MultiKey) ois.readObject();
            assertEquals(multiKey, deserializedMultiKey);
            ois.close();
        } catch (IOException e) {
            fail("IOException: " + e);
        } catch (ClassNotFoundException e) {
            fail("ClassNotFoundException: " + e);
        }
    }

    public void testReadResolveNull() {
        MultiKey multiKey = new MultiKey((Object[]) null);
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        ObjectOutputStream oos = null;
        try {
            oos = new ObjectOutputStream(baos);
            oos.writeObject(multiKey);
            oos.close();
        } catch (IOException e) {
            fail("IOException: " + e);
        }

        ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());
        ObjectInputStream ois = null;
        try {
            ois = new ObjectInputStream(bais);
            MultiKey deserializedMultiKey = (MultiKey) ois.readObject();
            assertEquals(multiKey, deserializedMultiKey);
            ois.close();
        } catch (IOException e) {
            fail("IOException: " + e);
        } catch (ClassNotFoundException e) {
            fail("ClassNotFoundException: " + e);
        }
    }
}