package org.mockitousage.bugs;

import org.junit.Before;
import org.junit.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.Spy;
import org.mockito.exceptions.base.MockitoException;
import org.mockitoutil.TestBase;

import java.lang.reflect.Field;
import java.util.LinkedList;
import java.util.List;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;
import static org.mockito.Mockito.verify;

public class SpyShouldHaveNiceNameTest extends TestBase {
    @Spy
    List veryCoolSpy = new LinkedList();

    @Mock
    Object testClass;

    @Before
    public void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testProcessWithValidSpy() {
        try {
            new SpyAnnotationEngine().process(SpyShouldHaveNiceNameTest.class, this);
            verify(veryCoolSpy).isEmpty();
        } catch (Exception e) {
            fail("Exception should not be thrown for valid @Spy annotation");
        }
    }

    @Test
    public void testProcessWithInvalidSpy() {
        try {
            Field field = SpyShouldHaveNiceNameTest.class.getDeclaredField("veryCoolSpy");
            field.set(this, null);
            new SpyAnnotationEngine().process(SpyShouldHaveNiceNameTest.class, this);
            fail("Exception should be thrown for invalid @Spy annotation");
        } catch (Exception e) {
            assertTrue(e instanceof MockitoException);
            assertEquals("Cannot create a @Spy for 'veryCoolSpy' field because the *instance* is missing",
                    e.getMessage());
        }
    }

    @Test
    public void testProcessWithNoSpy() {
        try {
            new SpyAnnotationEngine().process(Object.class, new Object());
        } catch (Exception e) {
            fail("Exception should not be thrown for class with no @Spy annotation");
        }
    }
}